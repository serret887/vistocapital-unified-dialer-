name: Deploy ViSto Capital Unified Dialer

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  SAM_CLI_TELEMETRY: 0
  STACK_NAME_PREFIX: vistocapital-dialer

jobs:
  test:
    name: Test Lambda Functions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: lambdas/lookupSupabase/package-lock.json

      - name: Install dependencies
        run: |
          cd lambdas/lookupSupabase
          npm ci

      - name: Run tests
        run: |
          cd lambdas/lookupSupabase
          npm test || echo "No tests found - skipping"

      - name: Lint code
        run: |
          cd lambdas/lookupSupabase
          npx eslint . || echo "ESLint not configured - skipping"

  validate-template:
    name: Validate SAM Template
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Validate SAM template
        run: |
          cd infra
          sam validate --template template.yaml

      - name: Build SAM application
        run: |
          cd infra
          sam build --use-container

  validate-cdk:
    name: Validate CDK Template
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: cdk/yarn.lock

      - name: Install CDK dependencies
        run: |
          cd cdk
          yarn install --frozen-lockfile

      - name: Install AWS CDK CLI
        run: npm install -g aws-cdk

      - name: Validate CDK template
        run: |
          cd cdk
          cdk synth --all

      - name: Run CDK tests
        run: |
          cd cdk
          npm test || echo "No tests found - skipping"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, validate-template, validate-cdk]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    env:
      ENVIRONMENT: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Node.js for CDK
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: cdk/yarn.lock

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Install CDK CLI
        run: npm install -g aws-cdk

      - name: Install CDK dependencies
        run: |
          cd cdk
          yarn install --frozen-lockfile

      - name: Build SAM application
        run: |
          cd infra
          sam build --use-container

      - name: Deploy SAM infrastructure to staging
        id: sam-deploy
        run: |
          cd infra
          sam deploy \
            --stack-name ${STACK_NAME_PREFIX}-staging \
            --parameter-overrides \
              Environment=staging \
              ConcurrentCalls=3 \
              SupabaseUrl=${{ secrets.STAGING_SUPABASE_URL }} \
              SupabaseAnonKey=${{ secrets.STAGING_SUPABASE_ANON_KEY }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --disable-rollback false

      - name: Get SAM stack outputs
        id: sam-outputs
        run: |
          cd infra
          OUTPUT=$(sam list stack-outputs --stack-name ${STACK_NAME_PREFIX}-staging --output json)
          echo "sam-outputs<<EOF" >> $GITHUB_OUTPUT
          echo "$OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Bootstrap CDK (if needed)
        run: |
          cd cdk
          cdk bootstrap aws://${{ steps.configure-aws-credentials.outputs.aws-account-id }}/${{ env.AWS_REGION }} || echo "Already bootstrapped"

      - name: Deploy CDK Connect automation to staging
        id: cdk-deploy
        run: |
          cd cdk
          cdk deploy ViStoCapital-Connect-staging \
            --parameters ConnectInstanceId=${{ secrets.STAGING_CONNECT_INSTANCE_ID }} \
            --context environment=staging \
            --context account=${{ steps.configure-aws-credentials.outputs.aws-account-id }} \
            --context region=${{ env.AWS_REGION }} \
            --require-approval never \
            --outputs-file cdk-outputs-staging.json

      - name: Get CDK stack outputs
        id: cdk-outputs
        run: |
          cd cdk
          if [ -f cdk-outputs-staging.json ]; then
            CDK_OUTPUT=$(cat cdk-outputs-staging.json)
            echo "cdk-outputs<<EOF" >> $GITHUB_OUTPUT
            echo "$CDK_OUTPUT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "cdk-outputs={}" >> $GITHUB_OUTPUT
          fi

      - name: Update SAM stack with Connect resource IDs
        if: steps.cdk-outputs.outputs.cdk-outputs != '{}'
        run: |
          cd infra
          # Extract Connect resource IDs from CDK outputs
          CONTACT_FLOW_ID=$(echo '${{ steps.cdk-outputs.outputs.cdk-outputs }}' | jq -r '.["ViStoCapital-Connect-staging"].ContactFlowId // empty')
          SPANISH_QUEUE_ID=$(echo '${{ steps.cdk-outputs.outputs.cdk-outputs }}' | jq -r '.["ViStoCapital-Connect-staging"].SpanishQueueId // empty')
          ENGLISH_QUEUE_ID=$(echo '${{ steps.cdk-outputs.outputs.cdk-outputs }}' | jq -r '.["ViStoCapital-Connect-staging"].EnglishQueueId // empty')
          
          # Redeploy SAM with Connect resource IDs if they exist
          if [ ! -z "$CONTACT_FLOW_ID" ] && [ "$CONTACT_FLOW_ID" != "null" ]; then
            echo "Updating SAM stack with Connect Flow ID: $CONTACT_FLOW_ID"
            sam deploy \
              --stack-name ${STACK_NAME_PREFIX}-staging \
              --parameter-overrides \
                Environment=staging \
                ConcurrentCalls=3 \
                SupabaseUrl=${{ secrets.STAGING_SUPABASE_URL }} \
                SupabaseAnonKey=${{ secrets.STAGING_SUPABASE_ANON_KEY }} \
                ConnectContactFlowId="$CONTACT_FLOW_ID" \
                ConnectQueueId="$SPANISH_QUEUE_ID" \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
              --no-confirm-changeset \
              --no-fail-on-empty-changeset
          fi

      - name: Post staging deployment comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const samOutputs = JSON.parse(`${{ steps.sam-outputs.outputs.sam-outputs }}`);
            const cdkOutputs = JSON.parse(`${{ steps.cdk-outputs.outputs.cdk-outputs }}`);
            
            let comment = `🚀 **Staging Deployment Successful**
            
            **Stack Name:** ${process.env.STACK_NAME_PREFIX}-staging
            **Environment:** staging
            **Region:** ${process.env.AWS_REGION}
            
            ## 🏗️ SAM Infrastructure Outputs:
            ${samOutputs.map(o => `- **${o.OutputKey}:** \`${o.OutputValue}\``).join('\n')}`;
            
            if (Object.keys(cdkOutputs).length > 0) {
              const connectStack = cdkOutputs['ViStoCapital-Connect-staging'];
              if (connectStack) {
                comment += `
            
            ## 📞 Amazon Connect Resources (CDK):
            ${Object.entries(connectStack).map(([key, value]) => `- **${key}:** \`${value}\``).join('\n')}`;
              }
            }
            
            comment += `
            
            **Next Steps:**
            - ✅ Infrastructure deployed via SAM
            - ✅ Connect resources automated via CDK
            - Test the staging environment
            - Merge to main branch for production deployment`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, validate-template, validate-cdk]
    if: github.ref == 'refs/heads/main'
    environment: production
    env:
      ENVIRONMENT: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Node.js for CDK
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: cdk/yarn.lock

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Install CDK CLI
        run: npm install -g aws-cdk

      - name: Install CDK dependencies
        run: |
          cd cdk
          yarn install --frozen-lockfile

      - name: Build SAM application
        run: |
          cd infra
          sam build --use-container

      - name: Deploy SAM infrastructure to production
        id: sam-deploy
        run: |
          cd infra
          sam deploy \
            --stack-name ${STACK_NAME_PREFIX}-production \
            --parameter-overrides \
              Environment=production \
              ConcurrentCalls=10 \
              SupabaseUrl=${{ secrets.PROD_SUPABASE_URL }} \
              SupabaseAnonKey=${{ secrets.PROD_SUPABASE_ANON_KEY }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --disable-rollback false

      - name: Get SAM stack outputs
        id: sam-outputs
        run: |
          cd infra
          OUTPUT=$(sam list stack-outputs --stack-name ${STACK_NAME_PREFIX}-production --output json)
          echo "sam-outputs<<EOF" >> $GITHUB_OUTPUT
          echo "$OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Bootstrap CDK (if needed)
        run: |
          cd cdk
          cdk bootstrap aws://${{ steps.configure-aws-credentials.outputs.aws-account-id }}/${{ env.AWS_REGION }} || echo "Already bootstrapped"

      - name: Deploy CDK Connect automation to production
        id: cdk-deploy
        run: |
          cd cdk
          cdk deploy ViStoCapital-Connect-production \
            --parameters ConnectInstanceId=${{ secrets.PROD_CONNECT_INSTANCE_ID }} \
            --context environment=production \
            --context account=${{ steps.configure-aws-credentials.outputs.aws-account-id }} \
            --context region=${{ env.AWS_REGION }} \
            --require-approval never \
            --outputs-file cdk-outputs-production.json

      - name: Get CDK stack outputs
        id: cdk-outputs
        run: |
          cd cdk
          if [ -f cdk-outputs-production.json ]; then
            CDK_OUTPUT=$(cat cdk-outputs-production.json)
            echo "cdk-outputs<<EOF" >> $GITHUB_OUTPUT
            echo "$CDK_OUTPUT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "cdk-outputs={}" >> $GITHUB_OUTPUT
          fi

      - name: Update SAM stack with Connect resource IDs
        if: steps.cdk-outputs.outputs.cdk-outputs != '{}'
        run: |
          cd infra
          # Extract Connect resource IDs from CDK outputs
          CONTACT_FLOW_ID=$(echo '${{ steps.cdk-outputs.outputs.cdk-outputs }}' | jq -r '.["ViStoCapital-Connect-production"].ContactFlowId // empty')
          SPANISH_QUEUE_ID=$(echo '${{ steps.cdk-outputs.outputs.cdk-outputs }}' | jq -r '.["ViStoCapital-Connect-production"].SpanishQueueId // empty')
          ENGLISH_QUEUE_ID=$(echo '${{ steps.cdk-outputs.outputs.cdk-outputs }}' | jq -r '.["ViStoCapital-Connect-production"].EnglishQueueId // empty')
          
          # Redeploy SAM with Connect resource IDs if they exist
          if [ ! -z "$CONTACT_FLOW_ID" ] && [ "$CONTACT_FLOW_ID" != "null" ]; then
            echo "Updating SAM stack with Connect Flow ID: $CONTACT_FLOW_ID"
            sam deploy \
              --stack-name ${STACK_NAME_PREFIX}-production \
              --parameter-overrides \
                Environment=production \
                ConcurrentCalls=10 \
                SupabaseUrl=${{ secrets.PROD_SUPABASE_URL }} \
                SupabaseAnonKey=${{ secrets.PROD_SUPABASE_ANON_KEY }} \
                ConnectContactFlowId="$CONTACT_FLOW_ID" \
                ConnectQueueId="$SPANISH_QUEUE_ID" \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
              --no-confirm-changeset \
              --no-fail-on-empty-changeset
          fi

      - name: Create release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Production Release v${{ github.run_number }}
          body: |
            ## 🚀 Production Deployment v${{ github.run_number }}
            
            **Deployed Stack:** ${STACK_NAME_PREFIX}-production
            **Commit:** ${{ github.sha }}
            **Environment:** production
            
            ### 🏗️ Infrastructure Changes
            ${{ github.event.head_commit.message }}
            
            ### 📊 SAM Stack Outputs
            ```json
            ${{ steps.sam-outputs.outputs.sam-outputs }}
            ```
            
            ### 📞 Connect Resources (CDK)
            ```json
            ${{ steps.cdk-outputs.outputs.cdk-outputs }}
            ```
            
            ### ✅ Deployment Status
            - ✅ SAM Infrastructure: Deployed
            - ✅ Amazon Connect Resources: Automated
            - ✅ Multi-language routing: Configured
            - ✅ Contact flows: Deployed
            - ✅ Lambda integrations: Associated
          draft: false
          prerelease: false

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify success
        if: ${{ contains(needs.*.result, 'success') }}
        run: |
          echo "✅ Unified Dialer deployment completed successfully!"
          echo "📊 SAM Infrastructure: Deployed"
          echo "📞 Amazon Connect: Automated via CDK"
          echo "🔄 Staging: ${{ needs.deploy-staging.result }}"
          echo "🚀 Production: ${{ needs.deploy-production.result }}"

      - name: Notify failure
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "❌ Unified Dialer deployment failed!"
          echo "Staging: ${{ needs.deploy-staging.result }}"
          echo "Production: ${{ needs.deploy-production.result }}"
          echo "Check the logs above for detailed error information."
          exit 1 